"""
    В Этом файле храняться тексты документации, description для эндпоинтов

    Авторизация
"""

protected_line = """
Этот эндпоинт предоставляет защищенный доступ к информации о текущем пользователе. 
Он требует аутентификации пользователя и возвращает сообщение и данные пользователя, если аутентификация прошла успешно.

**Метод**
```
GET /users/protected
```

**Заголовки запроса**
```
- `Authorization: Bearer <token> (Обязательный)
```
**Параметров для запроса нету**

**Ответ**

Если пользователь аутентифицирован, эндпоинт возвращает JSON-ответ с информацией о пользователе.
Пример успешного ответа
```
{
    "message": "This is a protected route",
    "user": {
        "uid": "some-user-id",
        "email": "user@example.com",
        "name": "John Doe",
        // другие поля, которые могут быть включены в информацию о пользователе
    }
}
```
**Пример ошибки аутентификации**

Если пользователь не аутентифицирован, эндпоинт возвращает ошибку 401 Unauthorized.
```
{
    "detail": "Invalid authentication credentials"
}
```

**Примечания**
```
- `Этот эндпоинт используется для проверки аутентификации пользователя и получения информации о пользователе.
- `Токен должен быть передан в заголовке Authorization в формате Bearer <token>.
"""

register_with_email_description = """
Этот эндпоинт обрабатывает регистрацию пользователей через электронную почту.
Он создает нового пользователя в Firebase и отправляет письмо для подтверждения адреса электронной почты.
**Запрос:**
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```json
{
  "username": "your_username",  # Обязательное поле: уникальное имя пользователя
  "email": "user@example.com",  # Обязательное поле: адрес электронной почты
  "permissions": "user",        # Обязательное поле: уровень доступа пользователя (может меняться)
  "first_name": "John",          # Необязательное поле: имя пользователя
  "last_name": "Doe",            # Необязательное поле: фамилия пользователя
  "phone_number": "+1234567890",  # Необязательное поле: номер телефона
  "avatar": "https://example.com/avatar.jpg",  # Необязательное поле: ссылка на аватар
  "rating": 0,                   # Необязательное поле: рейтинг пользователя (по умолчанию 0)
  "region_id": 1,                 # Необязательное поле: идентификатор региона
  "is_verified": false,          # Необязательное поле: флаг верификации email (по умолчанию false)
  "created_at": "2024-09-16T14:11:00+04:00",  # Необязательное поле: дата и время создания (автоматически заполняется)
  "last_active": "2024-09-16T14:11:00+04:00"   # Необязательное поле: дата и время последней активности (автоматически заполняется)
  "password": "strong_password123"  # Обязательное поле: пароль пользователя (не передается в ответе)
}
```
**Ответ:** 
В случае успешной регистрации вы получите JSON-ответ со следующей структурой:

Нужно будет с помощу firebase отправить письмо на email для подтверждения

```
{
  "message": "Пользователь успешно зарегистрирован. Пожалуйста, проверьте свою почту для подтверждения.",
  "user": {
    "id": "12345",
    "username": "your_username",
    "email": "user@example.com",
    "first_name": "John",
    "last_name": "Doe",
    // ... другие поля пользователя
  }
}

```
**Статусные коды:**
```
- **200** Created: Пользователь успешно создан и зарегистрирован. Системой отправлено письмо на указанный email с ссылкой для подтверждения учетной записи.
- **400** Bad Request: Запрос содержит ошибки. Возможные причины:
- **422** Unprocessable Entity: Данные запроса не прошли валидацию. Например, пароль может быть слишком коротким или не соответствовать требованиям политики безопасности.
- **500** Internal Server Error: Произошла внутренняя ошибка сервера. Обратитесь к администратору системы.
```
**Примечания:**
```
- `Подтверждение email: Для завершения регистрации пользователь должен перейти по ссылке в письме и подтвердить свой email.
- `Безопасность: Пароли пользователей хранятся в зашифрованном виде.
- `Дополнительные поля: В зависимости от конфигурации системы могут быть доступны дополнительные поля для профиля пользователя.
- `Ограничения: Могут существовать ограничения на длину пароля, допустимые символы и другие параметры.
```
"""

register_with_phone_number_description = """
Этот эндпоинт обрабатывает регистрацию пользователей по номеру телефона.
Он создает нового пользователя в Firebase и отправляет SMS с кодом подтверждения на указанный номер.
**Запрос:**
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```json
{
  "username": "your_username",  # Обязательное поле: уникальное имя пользователя
  "phone_number": "+1234567890",  # Обязательное поле: номер телефона в международном формате
  "first_name": "John",          # Необязательное поле: имя пользователя
  "last_name": "Doe",            # Необязательное поле: фамилия пользователя
  "country_code": "US",          # Необязательное поле: код страны
  "avatar": "[https://example.com/avatar.jpg](https://example.com/avatar.jpg)",  # Необязательное поле: ссылка на аватар
  "rating": 0,                   # Необязательное поле: рейтинг пользователя (по умолчанию 0)
  "region_id": 1,                 # Необязательное поле: идентификатор региона
  "created_at": "2024-09-16T14:11:00+04:00",  # Необязательное поле: дата и время создания (автоматически заполняется)
  "last_active": "2024-09-16T14:11:00+04:00"   # Необязательное поле: дата и время последней активности (автоматически заполняется)
}
**Ответ:**
В случае успешной регистрации вы получите JSON-ответ со следующей структурой:
```
{
  "message": "Пользователь успешно зарегистрирован. Пожалуйста, проверьте свой телефон для подтверждения.",
  "user": {
    "id": "12345",
    "username": "your_username",
    "phone_number": "+1234567890",
    "first_name": "John",
    "last_name": "Doe",
    // ... другие поля пользователя
  }
}
```
**Статусные коды:**
```
- **200** Created: Пользователь успешно создан и зарегистрирован. Системой отправлено SMS на указанный номер с кодом подтверждения.
- **400** Bad Request: Запрос содержит ошибки. Возможные причины:
- **422** Unprocessable Entity: Данные запроса не прошли валидацию. Например, номер телефона имеет неправильный формат.
- **500** Internal Server Error: Произошла внутренняя ошибка сервера. Обратитесь к администратору системы.
```
**Примечания:**
```
- **Подтверждение по SMS:** Для завершения регистрации пользователь должен ввести полученный код подтверждения.
- **Безопасность:** При работе с номерами телефонов необходимо соблюдать меры безопасности для предотвращения спама и других злоупотреблений.
- **Дополнительные поля:** В зависимости от конфигурации системы могут быть доступны дополнительные поля для профиля пользователя.
- **Ограничения:** Могут существовать ограничения на формат номера телефона, количество попыток ввода кода и другие параметры.
```
"""

login_with_email_description = """ 
Этот эндпоинт обрабатывает вход пользователей через электронную почту. 
Он проверяет, был ли пользователь зарегистрирован и подтвержден в Firebase. 
**Запрос:** 
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```
{
  "email": "user@example.com",  # Электронная почта пользователя
  "password": "password123"  # Пароль пользователя
}
```
**Ответ:**
В случае успешного входа вы получите JSON-ответ с идентификатором пользователя:
```
{
  "message": "User logged in successfully",
  "user_id": "some-uid"
}
```
**Статусные коды:**
```
- **200 OK:** Вход выполнен успешно.
- **403:** Электронная почта пользователя не подтверждена.
- **400:** Неверный формат запроса или ошибка при получении пользователя.
```
**Примечания:**
```
- `Валидация пароля происходит на клиентской стороне.
- `Если пользователь не подтвердил электронную почту, он не сможет войти в систему.
- `Проверка на верификацию просиходит напрямую с помощу firebase auth.currentUser
"""

login_with_phone_number_description="""
Этот эндпоинт отправляет код подтверждения на указанный номер телефона.
Он использует Firebase Authentication для отправки SMS с кодом подтверждения.

**Запрос:**
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```
{
"phone_number": "+1234567890",  # Номер телефона пользователя
"recaptcha_token": "recaptcha_token"  # Токен reCAPTCHA
}
```
**Ответ:**
В случае успешной отправки кода подтверждения вы получите JSON-ответ с сообщением и идентификатором сессии:
```
{
"message": "Код подтверждения отправлен на указанный номер телефона.",
"verification_id": "session_info"
}
```
**Статусные коды:**
```
- `200 OK: Код подтверждения отправлен успешно.
- `400: Неверный формат запроса или ошибка при отправке кода подтверждения.
```
**Примечания:**
```
- `Токен reCAPTCHA должен быть сгенерирован на клиентской стороне и передан в запросе.
- `Если номер телефона недействителен или токен reCAPTCHA неверен, запрос завершится ошибкой.
- `Проверка на верификацию происходит напрямую с помощью Firebase Authentication REST API.
"""

send_phone_verification_code = """

"""

tg_authorization = """
Этот эндпоинт обрабатывает авторизацию пользователей через Telegram. 
Он получает информацию о пользователе из Telegram, обновляет или создает запись пользователя в базе данных, 
управляет токенами доступа.
**Запрос:**
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```json
{
  "id": 123456789,  # Telegram ID пользователя
  "first_name": "Иван",  # Имя пользователя
  "last_name": "Иванов",  # Фамилия пользователя
  "username": "ivan_ivanov"  # Username пользователя в Telegram
}
```
Curl
```
curl -v -X POST "http://localhost:8000/users/tg_authorization" -H "Content-Type: application/json" -d '{                                                                                                                    
 "id": 123456789,
 "first_name": "Иван",
 "last_name": "Иванов",
 "username": "ivan_ivanov"
'
```
**Ответ:**
 В случае успешной авторизации вы получите JSON-ответ с токеном доступа, установленным в куке:
```json
{
  "message": "Авторизация прошла успешно, токен доступа установлен в куке."
}
```
**Статусные коды:**
```
- **200 OK:** Авторизация прошла успешно, токен доступа установлен в куке.
- **400:** Неверный формат запроса.
```
**Примечания:**
```
- `Если пользователь уже существует в базе данных, его информация будет обновлена предоставленными данными.
- `Если пользователь новый, будет создана новая запись пользователя.
- `Токены доступа действительны в течение 24 часов, при бездействии она будет удалено.
```
"""
email_sms = """
Данный эндпоинт предназначен для отправки кода подтверждения на электронную почту пользователя.
**Запрос:**
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```json
{
  "email": "test@example.com"  # Электронная почта пользователя
}
```
Curl
```
curl -i -X POST "http://127.0.0.1:8000/email/sms"      -H "Content-Type: application/json"      -d '{
    "email": "test@example.com"
}'
```
**Ответ:**
При успешном выполнении запроса возвращается сообщение о том, что код подтверждения отправлен.
**Статусные коды:**
```
- **200 OK:** Код подтверждения отправлен успешно.
- **401:** Электронная почта не валидна.
- **500:** Ошибка на сервере.
"""

email_reg = """
Данный эндпоинт преднозначен для регистрации порльзователя через электронную почту.
После регистрации пользователь автоматически авторизуется.
**Запрос:**
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```json
{
  "email": 123456789,  # Telegram ID пользователя
  "password": Testing123!, # Проль должен быть валидным
  "first_name": "Иван",  # Имя пользователя можно не отправлять
  "last_name": "Иванов",  # Фамилия пользователя можно не отправлять
  "username": "ivan_ivanov"  # Username пользователя можно не отправлять
}
```
Curl
```
curl -i -X POST "http://127.0.0.1:8000/users/email_registration"      -H "Content-Type: application/json"      -d '{
   "email": "test@example.com",
   "password": "Password",
   "username": "testuser",
   "name": "Test",
   "surname": "User"
}'
```
**Ответ:**
```
При успешном выполнении запроса возвращаются данные пользователя и токен доступа вставляется в куки.
```
**Статусные коды:**
```
- **200 OK:** Авторизация прошла успешно, токен доступа установлен в куке.
- **400:** Неверный формат запроса.
- **401:** Эл. почта не действительна.
- **402:** Пароль не валидный.
- **403:** Эл. почта занята.
- **405:** Эл. почта занята но является заблокированным или удаленным аккаунтом.
- **406:** Код верификации неправильный.
"""

email_login = """
Данный эндпоинт предназначен для авторизации пользователя через электронную почту и пароль.
**Запрос:**
Отправьте POST-запрос на этот эндпоинт с JSON-данными в теле запроса:
```json
{
  "email": "test@example.com",  # Электронная почта пользователя
  "password": "Testing123!"  # Пароль пользователя
}
```
Curl
```
curl -i -X POST "http://127.0.0.1:8000/users/email/login"      -H "Content-Type: application/json"      -d '{
    "email": "test@example.com",
    "password": "Testing123!"
}'
```
**Ответ:**
```
При успешном выполнении запроса возвращаются данные пользователя и токен доступа вставляется в куки.
```
**Статусные коды:**
```
- **200 OK:** Авторизация прошла успешно, токен доступа установлен в куке.
- **404 Not Found:** Пользователь с такой электронной почтой не найден.
- **403:** Пользователь найден, но пароль неверный.
- **406:** Код верификации неправильный.
"""
