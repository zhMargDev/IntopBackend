"""
    В Этом файле храняться тексты документации, description для эндпоинтов

    Данные пользователя
"""

update_user_location = """
Эндпоинт преднозначен для изменения локации пользователя.
**Параметры формы**
```
- `'Authorization': `Bearer ${idToken}`
- `uid`: Id пользователя который должен совпадать с id из токена
- `lat`: Ширина местоположения latitude
- `lon`: Долгода longitude
```
Пример Curl
```
curl -v -X PUT "http://localhost:8000/users/change_location" \
-H "Content-Type: multipart/form-data" \
  -F "uid"=1 \
  -F "lon"=214.124 \
  -F "lat"=2141.11
```
**Ответ**
```
Сообщение об успешном выполнении изменения с статусом 200.
```
**Ошибки**
```
- `403`: Id пользователя неправильный или не совпадает с id из токена.
- `404`: Пользователь не найден.
- `422`: Неправильно отправленные данные.
- `500`: Проблема на сервере.
```
"""

update_user = """
Обновляет информацию о пользователе. Необходимо отправить форму с данными, которые требуется обновить.
При успешном обновлении возвращается сообщение об успешном обновлении.
**Параметры формы:**
- `'Authorization': `Bearer ${idToken}`
- `uid`: Id пользователя для проверки совместимости с токеном, если не отправить то вернёться ошибка
- `first_name`: Имя пользователя (опционально)
- `second_name`: Фамилия пользователя (опционально)
- `username`: Имя пользователя (опционально)
- `phone_number`: Номер телефона (опционально)
- `email`: Адрес электронной почты (опционально)
- `region_id`: Идентификатор региона (опционально)
- `avatar`: Новый аватар пользователя (опционально)
```
Пример Curl
curl -v -X PUT "http://localhost:8000/users/update" \
  -H "Content-Type: multipart/form-data" \
  -F "uid"=1qwf12f12f1 \
  -F "first_name=John" \
  -F "second_name=Doe" \
  -F "username=johndoe" \
  -F "phone_number=1234567890" \
  -F "email=john.doe@example.com"
```
**Ответ:**
```
- Если обновление прошло успешно, возвращается сообщение о успешном обновлении данных.
```
**Ошибки:**
```
- `401 Unauthorized`: Токен доступа отсутствует или недействителен.
- `401 Unauthorized`: Недействительный пользователь. Отправленный id и id из токена не совпали или id не был отправлен.
- `404 Not Found`: Пользователь не найден.
"""

deactivate_user = """
Этот эндпоинт деактивирует аккаунт пользователя.
**Параметры запроса:**
```
- `'Authorization': `Bearer ${idToken}`
- `uid`: Id пользователя для проверки совместимости с токеном, если не отправить то вернёться ошибка
```
**Пример запроса**
```
curl -v -X DELETE "http://localhost:8000/users/deactivate" \
   -H "Content-Type: application/json" \
   -G \
   -d "uid=1"
```
**Ответ:**
```
- Если деактивация успешна, возвращается сообщение о том, что аккаунт успешно деактивирован и токен доступа удаляется из куки.
- В случае отсутствия токена, его недействительности или несоответствия `uid` возвращается ошибка.
```
**Ошибки:**
```
- `401 Unauthorized`: Токен доступа отсутствует, недействителен или `uid` не совпадает.
- `404 Not Found`: Пользователь не найден.
"""

get_users_by_filters = """
Этот эндпоинт возвращает пользователей, соответствующих указанным фильтрам. 
Фильтры позволяют отбирать пользователей по различным критериям, таким как ID, имя, роль и т.д.
**Пример запроса**
```
curl -X GET "http://localhost:8000/users/by_filters?uid=12345&role=admin&username=johndoe"
```
**Параметры запроса:**
```
- `uid`: Уникальный идентификатор пользователя в Firebase.
- `role`: Роль пользователя.
- `username`: Имя пользователя (поддерживается частичный поиск).
- `first_name`: Имя пользователя (поддерживается частичный поиск).
- `last_name`: Фамилия пользователя (поддерживается частичный поиск).
- `phone_number`: Номер телефона пользователя (поддерживается частичный поиск).
- `email`: Email пользователя (поддерживается частичный поиск).
- `region_id`: ID региона пользователя.
```
**Ответ:**
Если запрос выполнен успешно, возвращается JSON-массив объектов, представляющих пользователей, соответствующих фильтрам. Каждый объект пользователя содержит следующие поля:
```
- `uid:` Уникальный идентификатор пользователя.
- `telegram_id:` ID пользователя в Telegram (если применимо).
- `role:` Роль пользователя.
- `username:` Имя пользователя.
- `first_name:` Имя пользователя.
- `last_name:` Фамилия пользователя.
- `phone_number:` Номер телефона пользователя.
- `email:` Email пользователя.
- `region_id:` ID региона пользователя.
```
**Пример ответа:**
```
[
  {
    "uid": "12345",
    "role": "admin",
    "username": "johndoe",
    "first_name": "John",
    "last_name": "Doe",
    "email": "johndoe@example.com",
    // ... другие поля
  },
  // ... другие пользователи
]

```
**Коды ответов:**
```
- `200`: Запрос выполнен успешно, данные получены.
- `404`: Пользователи не найдены.
- `500`: Произошла внутренняя ошибка сервера.
```
**Важные замечания:**
```
- `Исключение пароля:` Поле пароля не включается в результат для обеспечения безопасности.
- `Частичный поиск:` Для текстовых полей (username, first_name, last_name, phone_number, email) поддерживается частичный поиск. Например, запрос с параметром username=john вернет всех пользователей, чье имя начинается с "john".
"""
